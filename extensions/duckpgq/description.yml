extension:
  name: duckpgq
  description: Extension that adds support for SQL/PGQ and graph algorithms
  version: 0.0.2
  language: C++
  build: cmake
  license: MIT
  maintainers:
    - Dtenwolde

repo:
  github: cwida/duckpgq-extension
  ref: 93a49ea95b45bd67f5467a4f8846491399d94d67

docs:
  hello_world: |
    CREATE TABLE Person as select * from 'https://gist.githubusercontent.com/Dtenwolde/2b02aebbed3c9638a06fda8ee0088a36/raw/8c4dc551f7344b12eaff2d1438c9da08649d00ec/person-sf0.003.csv';
    CREATE TABLE Person_knows_person as select * from 'https://gist.githubusercontent.com/Dtenwolde/81c32c9002d4059c2c3073dbca155275/raw/8b440e810a48dcaa08c07086e493ec0e2ec6b3cb/person_knows_person-sf0.003.csv';

    CREATE PROPERTY GRAPH snb
      VERTEX TABLES (
        Person
      )
    EDGE TABLES (
      Person_knows_person 	SOURCE KEY (Person1Id) REFERENCES Person (id)
                            DESTINATION KEY (Person2Id) REFERENCES Person (id)
      LABEL Knows
    );

    FROM GRAPH_TABLE (snb
      MATCH (a:Person)-[k:knows]->(b:Person)
      COLUMNS (a.id, b.id)
    )
    LIMIT 1;

    FROM GRAPH_TABLE (snb 
      MATCH p = ANY SHORTEST (a:person)-[k:knows]->{1,3}(b:Person) 
      COLUMNS (a.id, b.id, path_length(p))
    ) 
    LIMIT 1;

    FROM local_clustering_coefficient(snb, person, knows);

    DROP PROPERTY GRAPH snb; 

  extended_description: >
    The DuckPGQ extension supports the SQL/PGQ syntax as part of the official SQL:2023 standard developed by ISO.
    
    
    It introduces visual graph pattern matching and a more concise syntax for path-finding.
    For more information, please see the [DuckPGQ documentation](https://www.notion.so/duckpgq/b8ac652667964f958bfada1c3e53f1bb?v=3b47a8d44bdf4e0c8b503bf23f1b76f2).
    

    *Disclaimer*: As this extension is part of an ongoing research project by the Database Architectures group at CWI, some features may still be under development. We appreciate your understanding and patience as we continue to improve it.

