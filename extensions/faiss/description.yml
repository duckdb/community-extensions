extension:
  name: faiss
  description: Provides access to faiss indices from DuckDB.
  version: 0.10.0
  language: C++
  build: cmake
  license: MIT
  maintainers:
    - JAicewizard
    - arjenpdevries
  excluded_platforms: "osx_amd64;wasm_mvp;wasm_eh;wasm_threads;linux_amd64_musl"
  requires_toolchains: "fortran;omp"
  vcpkg_url: "https://github.com/jaicewizard/vcpkg.git"
  vcpkg_commit: 2fb35e52264e975a746ad3e88974c50e39c6344c 

repo:
  github: duckdb-faiss-ext/duckdb-faiss-ext
  ref: fab38b3ff0bb476f05e1b7d50343f6486003c268

docs:
  hello_world: |
    -- Generate semi-random input data and queries
    -- Note that the dimensionality of our data will be 5
    CREATE TABLE input AS SELECT i AS id, apply(generate_series(1, 5), j-> CAST(hash(i*1000+j) AS FLOAT)/18446744073709551615) AS data FROM generate_series(1, 1000) s(i);
    CREATE TABLE queries AS SELECT i AS id, apply(generate_series(1, 5), j-> CAST(hash(i*1000+j+8047329823) AS FLOAT)/18446744073709551615) AS data FROM generate_series(1, 10) s(i);
    -- Create the index and insert data into it
    CALL FAISS_CREATE('name', 5, 'IDMap,HNSW32');
    CALL FAISS_ADD((SELECT id, data FROM input), 'name');
    -- Get 10 results with uneven id
    SELECT id, UNNEST(FAISS_SEARCH_FILTER('name', 10, data, 'id%2==1', 'rowid', 'input')) FROM queries;
    -- Get 10 results with even id
    SELECT id, UNNEST(FAISS_SEARCH_FILTER('name', 10, data, 'id%2==0', 'rowid', 'input')) FROM queries;
    -- Get 10 results
    SELECT id, UNNEST(FAISS_SEARCH('name', 10, data)) FROM queries;
  extended_description: |
    The FAISS extension allows DuckDB users to store vector data in faiss, and query this data, making reliable vector search more accessible. On all linux platforms, this platform also supports GPU indexes, you can move a supported index to the GPU using `CALL FAISS_MOVE_GPU({index_name}, {gpu number})`. Currently only CUDA is supported, note that GPU support may be split into a seperate extension in the future. 
